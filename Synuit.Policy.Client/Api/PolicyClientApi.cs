using System;
using System.Collections.Generic;
using System.Text;


   //----------------------
   // <auto-generated>
   //     Generated using the NSwag toolchain v11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
   // </auto-generated>
   //----------------------

   namespace Synuit.Policy.Client.Api
   {
#pragma warning disable // Disable all warnings

      [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0))")]
      public partial class PolicyClientApi
      {
         private string _baseUrl = "";
         private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

         public PolicyClientApi(string baseUrl)
         {
            BaseUrl = baseUrl;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
               var settings = new Newtonsoft.Json.JsonSerializerSettings();
               UpdateJsonSerializerSettings(settings);
               return settings;
            });
         }

         public string BaseUrl
         {
            get { return _baseUrl; }
            set { _baseUrl = value; }
         }

         protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

         partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
         partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
         partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

         /// <summary>Gets the policy object and renders the content as a Json document.</summary>
         /// <param name="id">Policy id/name.</param>
         /// <returns>Returns the policy successfully</returns>
         /// <exception cref="SwaggerException">A server side error occurred.</exception>
         public System.Threading.Tasks.Task GetPolicyAsync(string id, string version)
         {
            return GetPolicyAsync(id, version, System.Threading.CancellationToken.None);
         }

         /// <summary>Gets the policy object and renders the content as a Json document.</summary>
         /// <param name="id">Policy id/name.</param>
         /// <returns>Returns the policy successfully</returns>
         /// <exception cref="SwaggerException">A server side error occurred.</exception>
         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
         public async System.Threading.Tasks.Task GetPolicyAsync(string id, string version, System.Threading.CancellationToken cancellationToken)
         {
            if (id == null)
               throw new System.ArgumentNullException("id");

            if (version == null)
               throw new System.ArgumentNullException("version");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v{version}/Policy/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
               using (var request_ = new System.Net.Http.HttpRequestMessage())
               {
                  request_.Method = new System.Net.Http.HttpMethod("GET");

                  PrepareRequest(client_, request_, urlBuilder_);
                  var url_ = urlBuilder_.ToString();
                  request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                  PrepareRequest(client_, request_, url_);

                  var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                  try
                  {
                     var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                     if (response_.Content != null && response_.Content.Headers != null)
                     {
                        foreach (var item_ in response_.Content.Headers)
                           headers_[item_.Key] = item_.Value;
                     }

                     ProcessResponse(client_, response_);

                     var status_ = ((int)response_.StatusCode).ToString();
                     if (status_ == "200")
                     {
                     return;// response_.Content.;
                     }
                     else
                     if (status_ == "404")
                     {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("If the policy is not found", (int)response_.StatusCode, responseData_, headers_, null);
                     }
                     else
                     if (status_ == "500")
                     {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("An Exception has occured", (int)response_.StatusCode, responseData_, headers_, null);
                     }
                     else
                     if (status_ != "200" && status_ != "204")
                     {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                     }
                  }
                  finally
                  {
                     if (response_ != null)
                        response_.Dispose();
                  }
               }
            }
            finally
            {
               if (client_ != null)
                  client_.Dispose();
            }
         }

         /// <summary>Post new/updated policy as identified by id to  policy repsository.</summary>
         /// <param name="id">Policy id/name.
         ///             i.e.  adminUI
         ///             i.e. synuit.context.server.permissions</param>
         /// <returns>Returns the ID of the newly created content</returns>
         /// <exception cref="SwaggerException">A server side error occurred.</exception>
         public System.Threading.Tasks.Task PutPolicyAsync(string id, Policy policy, string version)
         {
            return PutPolicyAsync(id, policy, version, System.Threading.CancellationToken.None);
         }

         /// <summary>Post new/updated policy as identified by id to  policy repsository.</summary>
         /// <param name="id">Policy id/name.
         ///             i.e.  adminUI
         ///             i.e. synuit.context.server.permissions</param>
         /// <returns>Returns the ID of the newly created content</returns>
         /// <exception cref="SwaggerException">A server side error occurred.</exception>
         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
         public async System.Threading.Tasks.Task PutPolicyAsync(string id, Policy policy, string version, System.Threading.CancellationToken cancellationToken)
         {
            if (id == null)
               throw new System.ArgumentNullException("id");

            if (version == null)
               throw new System.ArgumentNullException("version");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v{version}/Policy/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
               using (var request_ = new System.Net.Http.HttpRequestMessage())
               {
                  var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(policy, _settings.Value));
                  content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                  request_.Content = content_;
                  request_.Method = new System.Net.Http.HttpMethod("POST");

                  PrepareRequest(client_, request_, urlBuilder_);
                  var url_ = urlBuilder_.ToString();
                  request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                  PrepareRequest(client_, request_, url_);

                  var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                  try
                  {
                     var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                     if (response_.Content != null && response_.Content.Headers != null)
                     {
                        foreach (var item_ in response_.Content.Headers)
                           headers_[item_.Key] = item_.Value;
                     }

                     ProcessResponse(client_, response_);

                     var status_ = ((int)response_.StatusCode).ToString();
                     if (status_ == "201")
                     {
                        return;
                     }
                     else
                     if (status_ == "500")
                     {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("An Exception has occured", (int)response_.StatusCode, responseData_, headers_, null);
                     }
                     else
                     if (status_ != "200" && status_ != "204")
                     {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                     }
                  }
                  finally
                  {
                     if (response_ != null)
                        response_.Dispose();
                  }
               }
            }
            finally
            {
               if (client_ != null)
                  client_.Dispose();
            }
         }

         /// <summary>Delete the policy from repository specified by ID</summary>
         /// <returns>Content Deleted Successfully</returns>
         /// <exception cref="SwaggerException">A server side error occurred.</exception>
         public System.Threading.Tasks.Task DeletePolicyAsync(string id, string version)
         {
            return DeletePolicyAsync(id, version, System.Threading.CancellationToken.None);
         }

         /// <summary>Delete the policy from repository specified by ID</summary>
         /// <returns>Content Deleted Successfully</returns>
         /// <exception cref="SwaggerException">A server side error occurred.</exception>
         /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
         public async System.Threading.Tasks.Task DeletePolicyAsync(string id, string version, System.Threading.CancellationToken cancellationToken)
         {
            if (id == null)
               throw new System.ArgumentNullException("id");

            if (version == null)
               throw new System.ArgumentNullException("version");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v{version}/Policy/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
               using (var request_ = new System.Net.Http.HttpRequestMessage())
               {
                  request_.Method = new System.Net.Http.HttpMethod("DELETE");

                  PrepareRequest(client_, request_, urlBuilder_);
                  var url_ = urlBuilder_.ToString();
                  request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                  PrepareRequest(client_, request_, url_);

                  var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                  try
                  {
                     var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                     if (response_.Content != null && response_.Content.Headers != null)
                     {
                        foreach (var item_ in response_.Content.Headers)
                           headers_[item_.Key] = item_.Value;
                     }

                     ProcessResponse(client_, response_);

                     var status_ = ((int)response_.StatusCode).ToString();
                     if (status_ == "200")
                     {
                        return;
                     }
                     else
                     if (status_ == "404")
                     {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("Content Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                     }
                     else
                     if (status_ == "500")
                     {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("An Exception has occured", (int)response_.StatusCode, responseData_, headers_, null);
                     }
                     else
                     if (status_ != "200" && status_ != "204")
                     {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                     }
                  }
                  finally
                  {
                     if (response_ != null)
                        response_.Dispose();
                  }
               }
            }
            finally
            {
               if (client_ != null)
                  client_.Dispose();
            }
         }

         private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
         {
            if (value is System.Enum)
            {
               string name = System.Enum.GetName(value.GetType(), value);
               if (name != null)
               {
                  var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                  if (field != null)
                  {
                     var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                         as System.Runtime.Serialization.EnumMemberAttribute;
                     if (attribute != null)
                     {
                        return attribute.Value;
                     }
                  }
               }
            }
            else if (value is byte[])
            {
               return System.Convert.ToBase64String((byte[])value);
            }
            else if (value != null && value.GetType().IsArray)
            {
               var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
               return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            return System.Convert.ToString(value, cultureInfo);
         }
      }



      [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
      public partial class Policy : System.ComponentModel.INotifyPropertyChanged
      {
         private System.Collections.ObjectModel.ObservableCollection<Role> _roles;
         private System.Collections.ObjectModel.ObservableCollection<Permission> _permissions;
         private string _name;
         private string _description;

         [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
         public System.Collections.ObjectModel.ObservableCollection<Role> Roles
         {
            get { return _roles; }
            set
            {
               if (_roles != value)
               {
                  _roles = value;
                  RaisePropertyChanged();
               }
            }
         }

         [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
         public System.Collections.ObjectModel.ObservableCollection<Permission> Permissions
         {
            get { return _permissions; }
            set
            {
               if (_permissions != value)
               {
                  _permissions = value;
                  RaisePropertyChanged();
               }
            }
         }

         [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
         public string Name
         {
            get { return _name; }
            set
            {
               if (_name != value)
               {
                  _name = value;
                  RaisePropertyChanged();
               }
            }
         }

         [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
         public string Description
         {
            get { return _description; }
            set
            {
               if (_description != value)
               {
                  _description = value;
                  RaisePropertyChanged();
               }
            }
         }

         public string ToJson()
         {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
         }

         public static Policy FromJson(string data)
         {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Policy>(data);
         }

         public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

         protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
         {
            var handler = PropertyChanged;
            if (handler != null)
               handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
         }

      }

      [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
      public partial class Role : System.ComponentModel.INotifyPropertyChanged
      {
         private string _name;
         private System.Collections.ObjectModel.ObservableCollection<string> _subjects;
         private System.Collections.ObjectModel.ObservableCollection<string> _identityRoles;

         [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
         public string Name
         {
            get { return _name; }
            set
            {
               if (_name != value)
               {
                  _name = value;
                  RaisePropertyChanged();
               }
            }
         }

         [Newtonsoft.Json.JsonProperty("subjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
         public System.Collections.ObjectModel.ObservableCollection<string> Subjects
         {
            get { return _subjects; }
            set
            {
               if (_subjects != value)
               {
                  _subjects = value;
                  RaisePropertyChanged();
               }
            }
         }

         [Newtonsoft.Json.JsonProperty("identityRoles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
         public System.Collections.ObjectModel.ObservableCollection<string> IdentityRoles
         {
            get { return _identityRoles; }
            set
            {
               if (_identityRoles != value)
               {
                  _identityRoles = value;
                  RaisePropertyChanged();
               }
            }
         }

         public string ToJson()
         {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
         }

         public static Role FromJson(string data)
         {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Role>(data);
         }

         public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

         protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
         {
            var handler = PropertyChanged;
            if (handler != null)
               handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
         }

      }

      [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
      public partial class Permission : System.ComponentModel.INotifyPropertyChanged
      {
         private string _name;
         private System.Collections.ObjectModel.ObservableCollection<string> _roles;

         [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
         public string Name
         {
            get { return _name; }
            set
            {
               if (_name != value)
               {
                  _name = value;
                  RaisePropertyChanged();
               }
            }
         }

         [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
         public System.Collections.ObjectModel.ObservableCollection<string> Roles
         {
            get { return _roles; }
            set
            {
               if (_roles != value)
               {
                  _roles = value;
                  RaisePropertyChanged();
               }
            }
         }

         public string ToJson()
         {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
         }

         public static Permission FromJson(string data)
         {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Permission>(data);
         }

         public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

         protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
         {
            var handler = PropertyChanged;
            if (handler != null)
               handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
         }

      }

      [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0))")]
      public partial class SwaggerException : System.Exception
      {
         public int StatusCode { get; private set; }

         public string Response { get; private set; }

         public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

         public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
             : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
         {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
         }

         public override string ToString()
         {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
         }
      }

      [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0))")]
      public partial class SwaggerException<TResult> : SwaggerException
      {
         public TResult Result { get; private set; }

         public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
             : base(message, statusCode, response, headers, innerException)
         {
            Result = result;
         }
      }

   }